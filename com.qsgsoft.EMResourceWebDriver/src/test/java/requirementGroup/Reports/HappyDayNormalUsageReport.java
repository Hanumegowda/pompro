package requirementGroup.Reports;

import static org.testng.Assert.assertTrue;

import java.io.File;
import java.util.Properties;

import lib.dataObject.Login_data;
import lib.dataObject.Report_data;
import lib.dataObject.User_data;
import lib.module.NavigationToSubMenus;
import lib.page.ApplicationUsageReportsMenu;
import lib.page.AutoIT;
import lib.page.EventManagement;
import lib.page.Login;
import lib.page.RegionDefault;
import lib.page.Report;
import lib.page.SelectRegion;
import lib.page.UsersList;

import org.testng.annotations.Test;

import qaframework.lib.UserDefinedFunctions.CSVFunctions;
import qaframework.lib.UserDefinedFunctions.Date_Time_settings;
import qaframework.lib.UserDefinedFunctions.PathsProperties;
import qaframework.lib.UserDefinedFunctions.ReadAutoItProperty;
import qaframework.lib.testngExtensions.TestNG_UI_EXTENSIONS;

public class HappyDayNormalUsageReport extends TestNG_UI_EXTENSIONS {
	public HappyDayNormalUsageReport() throws Exception {
		super();
	}
	
	/*************************************************************************************
    'Description : Verify that the Normal Usage report cannot be generated by users other than RegAdmin.   
    'Precondition:
    'Date        : 15-May-2015
    'Author      : Hanumegowda
    '---------------------------------------------------------------
    'Modified Date                                               Modified By
    'Date                                                         Name
	**************************************************************************************/
	@Test(description = "Verify that the Normal Usage report cannot be generated by users other than RegAdmin.")
	public void testHappyDay162366() throws Exception {

		gstrTCID = "162366";
		gstrTO = "Verify that the Normal Usage report cannot be generated by users other than RegAdmin.";

		Login objLogin = new Login(this.driver1);
		Login_data objLogindata = new Login_data();
		User_data objUserdata = new User_data();
		Report_data objReport_data = new Report_data();
		Date_Time_settings dts = new Date_Time_settings();
		SelectRegion objSelectRegionpage = new SelectRegion(this.driver1);
		UsersList objUsersList = new UsersList(this.driver1);
		RegionDefault objRegionDefault = new RegionDefault(this.driver1);
		NavigationToSubMenus objNavigationToSubmenus = new NavigationToSubMenus(
				this.driver1);
		Report objReport = new Report(this.driver1);
		ApplicationUsageReportsMenu objApplicationUsageReportsMenu = new ApplicationUsageReportsMenu(
				this.driver1);
		SelectRegion objSelectRegionpage1 = new SelectRegion(this.driver1);

		Login objLogin1 = new Login(this.driver1);
		RegionDefault objRegionDefault1 = new RegionDefault(this.driver1);
		NavigationToSubMenus objNavigationToSubmenus1 = new NavigationToSubMenus(
				this.driver1);
		EventManagement objEventManagement = new EventManagement(this.driver1);
		Date_Time_settings objDts = new Date_Time_settings();
		AutoIT objAutoIT = new AutoIT(this.driver1);

		PathsProperties objAP = new PathsProperties();
		Properties pathProps = objAP.ReadAutoit_FilePath();

		String strTimeText = dts.getCurrentDate(objReport_data.dateFormat1);

		String fileType = objReport_data.csvFile;

		// Auto it path
		String AutoIT_FILE_PATH = objReport_data.reportsDownloadAutoItPath;
		String strAutoItPath = ReadAutoItProperty
				.readDataFromAutoItPath(AutoIT_FILE_PATH);
		String strAutoITName = pathProps
				.getProperty(objReport_data.reportsDownloadAutoItName);
		String fileDownloadPath = pathProps
				.getProperty(objReport_data.reportsDownloadPath);
		File file = new File(System.getProperty("user.dir") + fileDownloadPath);
		String strDownloadName1 = file + "\\" + "TC91122" + "_" + strTimeText
				+ fileType;

		objLogin.loginToApplication(objLogindata.strAdminUser,
				objLogindata.strAdminUserPwd);

		objSelectRegionpage.selectRegionAndNavigate(objLogindata.strRegionName);

		objRegionDefault.selectFrame();

		objNavigationToSubmenus.navigateToUsers();

		objUsersList
				.clickCreateNewUserButton()
				.enterUserDetails(objUserdata.strNewUserName,
						objUserdata.strNewPassword, objUserdata.strFullName)

				.selectFirstRole().clickAdvancedOptionAndExpand()
				.clickallcheckboxes().clickSaveButton();
		objRegionDefault.selectFrame();
		objLogin.clickLogOut();

		System.out.println(objUserdata.strNewUserName);

		objLogin1.loginAsNewUser(objUserdata.strNewUserName,
				objUserdata.strNewPassword);

		objRegionDefault1.selectFrame();
		Thread.sleep(5000);

		objNavigationToSubmenus1.clickOnReports();
		objReport.verApplicationUsageReportsIsNotDisplayed();
		objLogin1.clickLogOut();

		objLogin1.loginToApplication(objLogindata.strAdminUser,
				objLogindata.strAdminUserPwd);
		objSelectRegionpage1
				.selectRegionAndNavigate(objLogindata.strRegionName);
		objRegionDefault1.selectFrame();
		objNavigationToSubmenus1.clickOnReports();
		objReport.verApplicationUsageReportsIsDisplayed()
				.clickOnApplicationUsageReports();
		objApplicationUsageReportsMenu
				.verApplicationUsageReportsPageIsDisplayed()
				.clickOnNormalUsage();

		String strApplicationDate = objEventManagement
				.getApplicationTimeWithCSTCDT();
		String[] strDate = strApplicationDate.split(" ");
		String strCurrentDate = objDts.getCurrentDate("dd");
		String strStartDate = "";
		int intDate = Integer.parseInt(strDate[0]);
		int intCurrentDate = Integer.parseInt(strCurrentDate);

		if (intDate == intCurrentDate) {
			strStartDate = objDts.getCurrentDate("MM/dd/yyyy");
		} else {
			if (intDate < intCurrentDate) {
				strStartDate = objDts.getPastDayNew(1, "MM/dd/yyyy");
			} else {
				strStartDate = objDts.getFutureDay(1, "MM/dd/yyyy");
			}
		}

		String strStartDate1 = objDts.AddDaytoExistingDate(strStartDate, -1,
				"MM/dd/yyyy");
		System.out.println(strStartDate);
		System.out.println(strStartDate1);
		objApplicationUsageReportsMenu
				.verApplicationUsageReportNonAdministrativePageIsDisplayed();
		objApplicationUsageReportsMenu.enterStartDate(strStartDate1)
				.enterEndDate(strStartDate);

		objReport.clickOnGenerateReportBtn();

		objAutoIT.DownloadTheReports(strAutoItPath, strDownloadName1,
				strAutoITName);

		File file2 = new File(strDownloadName1);
		boolean strCSV1 = file2.exists();

		objLogin1.clickLogOut();
		if (strCSV1) {
			gstrResult = "PASS";
		} else {
			gstrResult = "FAIL";
		}
	}
	
	
	/***********************************************************************************************
	'Description : Generate ‘Normal usage by Region’ report and verify all data   
	'Date	 	 : 22-May-2015
	'Author		 : Sangappa.k
	'-----------------------------------------------------------------------------------------------
	'Modified Date			                        	               Modified By
	'Date					                                           Name
	************************************************************************************************/
	@Test(description = "Generate ‘Normal usage by Region’ report and verify all data ")
	public void testHappyDay161073() throws Exception {

		gstrTCID = "161073";
		gstrTO = "Generate ‘Normal usage by Region’ report and verify all data ";
		
		// Objects for data
		Login_data objTest_data = new Login_data();
		AutoIT objAutoIT = new AutoIT(this.driver1);
		CSVFunctions objCSVFunctions = new CSVFunctions();

		PathsProperties objAP = new PathsProperties();
		Properties pathProps = objAP.ReadAutoit_FilePath();
		Date_Time_settings objDate_Time_settings = new Date_Time_settings();
		Report_data objReport_data = new Report_data();

		String strTimeText = objDate_Time_settings
				.getCurrentDate(objReport_data.dateFormat1);
		String fileType = objReport_data.csvFile;

		String AutoIT_FILE_PATH = objReport_data.reportsDownloadAutoItPath;
		String strAutoItPath = ReadAutoItProperty
				.readDataFromAutoItPath(AutoIT_FILE_PATH);
		String strAutoITName = pathProps
				.getProperty(objReport_data.reportsDownloadAutoItName);
		String fileDownloadPath = pathProps
				.getProperty(objReport_data.reportsDownloadPath);

		File file = new File(System.getProperty("user.dir") + fileDownloadPath);

		String strDownloadName = file + "\\" + "TC" + gstrTCID + "_"
				+ strTimeText + fileType;
		User_data objUserdata = new User_data();
		
		Login objLogin1 = new Login(this.driver1);
		RegionDefault objRegionDefault1 = new RegionDefault(this.driver1);
		Report objReport1 = new Report(this.driver1);
		NavigationToSubMenus objNavigationToSubMenus1 = new NavigationToSubMenus(
				this.driver1);
		EventManagement objEventManagement1 = new EventManagement(this.driver1);
		SelectRegion objSelectRegion1 = new SelectRegion(this.driver1);
		ApplicationUsageReportsMenu objApplicationUsageReportsMenu1= new ApplicationUsageReportsMenu(driver1);

		Date_Time_settings objDts1 = new Date_Time_settings();

	
		objLogin1.loginToApplication(objTest_data.strUserName,
				objTest_data.strPassword);

		objSelectRegion1.selectRegionAndNavigate(objTest_data.strRegionName);

		objRegionDefault1.selectFrame();

		objNavigationToSubMenus1.navigateToApplicationUsageReports();
		String strApplicationTime = objEventManagement1.getApplicationTime();

		String strCurrentYear = objDts1.getCurrentDate("yyyy");

		strApplicationTime = strApplicationTime + " " + strCurrentYear;

		String strStartDate = objDts1.converDateFormat(strApplicationTime,
				"dd MMM HH:mm yyyy", "MM/dd/yyyy");

		objApplicationUsageReportsMenu1
				.verApplicationUsageReportsPageIsDisplayed()
				.clickOnNormalUsage()
				.verApplicationUsageReportNonAdministrativePageIsDisplayed()
				.enterStartDate(strStartDate).enterEndDate(strStartDate);
		objReport1.clickOnGenerateReportBtn();

		objAutoIT.DownloadTheReports(strAutoItPath, strDownloadName,
				strAutoITName);

		int intCount = 0;

		File file1 = new File(strDownloadName);

		assertTrue(file1.exists(), "file not found");

		String strHeaders[] = objReport_data.AppUsageHeaders;
		for (intCount = 1; intCount <= strHeaders.length; intCount++) {

			String[][] strReportData = { {}, {}, {},
					{ objReport_data.AppUsageHeaders[intCount - 1] } };

			objCSVFunctions.verifyMonthlyAssesmentCSVData(strDownloadName,
					strReportData);

		}

		objLogin1.clickLogOut();

		gstrResult = "PASS";
	}

}
		

